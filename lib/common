#!/usr/bin/env sh

# Skip when already sourced:
test ! $LXC_COMPOSE_LIBLOAD_COMMON || return
export LXC_COMPOSE_LIBLOAD_COMMON=1

###
# Test if a command can be executed.
# Arguments:
#   $1 - command to check.
# Outputs:
#   Nothing.
# Returns:
#   0, if the command exists.
###
testcmd() {
	command -v "$1" > /dev/null 2>&1
}

###
# Source the primary shell rc file, if it exists.
# Outputs:
#   A message that states that the file was reloaded, if it exists, otherwise nothing.
# Returns:
#   0, if sourcing was successful or if there is nothing to source from.
###
sourcerc() {
	test -s "$ENV_SHELL_RC" && \. "$ENV_SHELL_RC"
	return 0
}

###
# Ensure packages are installed using the default package manager and re-source rc.
# Arguments:
#   $@ - packages to install if not installed.
# Outputs:
#   Installer log or function error, otherwise nothing.
# Returns:
#   0, if packages were found or were installed successfully, otherwise the last error of the package manager. 
#   Returns 1001, if the existence of the package could not be verified or no matching package manager was found to install a package.
###
pkgreq() {
	if testcmd apk; then
		for pkg in "$@"; do
			if ! apk info --installed --quiet $pkg; then
				apk add --no-cache $pkg || return
				inst=1
			fi
		done
	elif testcmd dpkg; then
		for pkg in "$@"; do
			if ! dpkg -l "$pkg" | grep -q ^ii; then
				if testcmd apt-get; then
					apt-get install $pkg -y || return
				else
					echo "Unable to ensure $pkg, because no package manager to install the package was found."
					return 1001
				fi
				inst=1
			fi
		done
	elif testcmd rpm; then
		for pkg in "$@"; do
			if ! rpm --nosignature --nodigest -q "$pkg" > /dev/null 2>&1; then
				if testcmd dnf; then
					dnf install $pkg -y || return
				elif testcmd yum; then
					yum install $pkg -y || return
				else
					echo "Unable to ensure $pkg, because no package manager to install the package was found."
					return 1001
				fi
				inst=1
			fi
		done
	elif testcmd brew; then
		for pkg in "$@"; do
			if ! brew list $pkg > /dev/null 2>&1; then
				brew install $pkg -y || return
				inst=1
			fi
		done
	else
		echo "Unable to require $@, because no package detection was found." >&2
		return 1001
	fi
	test ! $inst && return 0
	sourcerc
}

###
# Try to install any of the given packages in the given order using the default package manager and re-source rc.
# Please ensure to check if an installation is required (i.e. using testcmd)
# Arguments:
#   $@ - packages to try to install one from.
# Outputs:
#   Error message if none of the package manager calls returned 0 implying that none of the packages could be installed, otherwise nothing.
# Returns:
#   0, if any package was found and installed successfully, otherwise 1.
#   Some, but not all package managers, pass and cause 0 when a package is already installed.
#   this is not guaranteed.
###
pkgiao() {
	for pkg in "$@"; do
		pkgreq "$pkg" 2> /dev/null && return
	done
	echo "Unable to install one of $@." >&2 && return 1
}

###
# Ensure given services are enabled and started.
# Arguments:
#   $@ - services to enable/start.
# Outputs:
#   Service log or function error, otherwise nothing.
# Returns:
#   0, if services were found or were added/started successfully, otherwise the last error of the service manager. 
###
svcreq() {
	if testcmd rc-service; then
		for svc in "$@"; do
			rc-service $svc start && rc-update add $svc default
		done
	elif testcmd systemctl; then
		for svc in "$@"; do
			systemctl start $svc && systemctl enable $svc
		done
	fi
}

###
# Ensure given services are enable and started. If a service already runs, it will be restarted.
# Arguments:
#   $@ - services to enable/start/restart.
# Outputs:
#   Service log or function error, otherwise nothing.
# Returns:
#   0, if services were found or were added/started/restarted successfully, otherwise the last error of the service manager. 
###
svcrun() {
	if testcmd rc-service; then
		for svc in "$@"; do
			rc-service $svc restart && rc-update add $svc default
		done
	elif testcmd systemctl; then
		for svc in "$@"; do
			systemctl restart $svc && systemctl enable $svc
		done
	fi
}

